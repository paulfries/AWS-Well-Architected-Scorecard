a: "Operational Excellence"

a1: 'Perform Operations as Code'
a1_1: 'No operations are performed as code (all manual tasks)'
a1_2: 'Some operations are performed as code, while some operations are manual '
a1_3: 'Most operations are performed as code, few manual operations are required '
a1_4: 'All operations are performed using code (CloudFormation, Elastic Beanstalk, Ansible, etc)'
a1_min: 2

a2: 'Code Management Strategy'
a2_1: 'Code is in SCM (e.g. git) and used for release, but there is little to no documented or agreed strategy of how to branch, merge, or release code'
a2_2: 'Develop on version branches. Every deployment can be tracked back to understand all changes which went into it by anyone in the team'
a2_3: 'Develop on feature branches that are short-lived (i.e. less than two weeks) and release from merged master'
a2_4: "Develop and release from master with at least daily code check-ins using a process allowing traceability to the requested feature "
a2_min: 1

a3: 'DevOps Practice'
a3_1: 'Environments in production are not controlled by contributors building the product'
a3_2: 'Environments in staging are controlled and partially managed by the contributors building the product and receive issues escalations for that environment'
a3_3: 'Environments in production are owned by the contributors building the product, but controlled by someone else'
a3_4: 'DevOps model is followed - environments in production are fully controlled and owned by the contributors building the product, including alerts and issue escalations'
a3_min: 2

a4: 'Logging and Telemetry'
a4_1: 'Default or customized logging and no telemetry'
a4_2: 'Rudimentary logging and telemetry in place. A minimum set of data is collected to understand the application state'
a4_3: "Adherence to established logging and telemetry standards Suitable information available in logs and telemetry for troubleshooting common issues"
a4_4: "Adherence to established logging and telemetry standards Most issues can be diagnosed through logs and telemetry"
a4_min: 2

a5: 'Backward / Forward Compatibility'
a5_1: 'Breaking changes (i.e. tested locally)'
a5_2: 'Changes are regressed by users of the product prior to release'
a5_3: 'Coding practices supports forward compatibility'
a5_4: 'Coding practices support backward and forward compatibility'
a5_min: 2

a6: 'Monitoring and Alerting'
a6_1: 'Logs have enough data to set up monitoring and alerts on'
a6_2: 'Some monitoring and some alerting is prioritized in the work queue'
a6_3: "Prioritization of monitoring and alerting as part of the acceptance criteria for all work Access to log archives and telemetry is available for troubleshooting"
a6_4: "Prioritization of monitoring, alerting, and validation of triggers (e.g. SLAs) as part of the acceptance criteria for all work Logs are indexed and telemetry is readily available for troubleshooting"
a6_min: 2

a7: 'Quality Engineering Model'
a7_1: 'Contributors have separate roles (i.e. only code or test)'
a7_2: 'Some contributors can both code and test'
a7_3: 'Most contributors both code and test'
a7_4: 'All contributors both code and test'
a7_min: ~

a8: 'Code Reuse'
a8_1: 'Contributors usually code what they need'
a8_2: 'Contributors can highlight where they have reused open source or code from other projects'
a8_3: 'Contributors aim to reuse vs rebuild while coding and actively evangelize to maximize code reuse by others'
a8_4: 'Contributors seek to reuse vs rebuild as part of the planning process, actively evangelize to maximize code reuse by others, and actively contributes to other code'
a8_min: ~


a9: 'Incremental Updates'
a9_1: 'Contributors do not use prototyping to estimate or validate any features'
a9_2: 'Contributors sometimes use prototyping to estimate larger features more confidently'
a9_3: 'Contributors often use prototyping to validate features with users before completion'
a9_4: 'Contributors always use prototyping to validate features with users before completion'
a9_min: ~

a10: 'Operational Readiness'
a10_1: 'The Application is appropriately managed on-premises, but no feasible plan exists for managing it once migrated to the cloud'
a10_2: 'Application owners understand the need for a cloud operating model to support the application, but have some degree of skill or resource gap. A plan is in place to address the concern'
a10_3: 'The application owner has developed a workable clod operating model for the application and has most of the resources necessary to support it'
a10_4: 'The application owner has developed a workable cloud operating model for the application and has all of the resources necessary to support it'
a10_min: ~

a11: 'Behavior Driven Development (BDD)'
a11_1: 'Contributors do not have an understanding of BDD methodology'
a11_2: 'Contributors understand BDD methodology, and practice it on some features'
a11_3: 'Contributors understand BDD methodology, and practice it on most features'
a11_4: 'BDD methodology is how things get done'
a11_min: ~

a12: 'Infrastructure Baseline'
a12_1: 'Infrastructure makes use of non-standard components (OS, Database, or other) - Exception Required'
a12_2: 'Standard (approved) components are used in the solution architecture'
a12_3: 'The solution architecture replaces some aspects of the infrastructure with managed cloud solutions'
a12_4: 'Solution architecture is serverless and makes use of contemporary managed services throughout'
a12_min: 2

a13: 'Continuous Integration'
a13_1: "No automated build pipeline. Code is manually compiled and may not always compile successfully"
a13_2: "Build pipeline contains manual steps but the build is never left in a failed state. Some failures may be missed"
a13_3: 'Build pipeline requires automated tests to pass before feature is considered "complete"'
a13_4: 'Build pipeline requires automated tests to pass and failures are actively monitored and a process for handling failures is in place'
a13_min: 3

a14: 'Build Pipeline Traceability'
a14_1: 'Code can be built correctly - manually or via a build pipeline. Vulnerabilities are automatically detected by the source control solution'
a14_2: 'There is a build pipeline with a visual representation and contributors are automatically alerted when a build fails'
a14_3: 'Build is triggered by source control check-in or is scheduled, with alerts being sent out on failures'
a14_4: 'Build is triggered by source control check-in or a build of its dependent services, with alerts being sent out on failures, and if successful the build is pushed across environments to production'
a14_min: 1

a15: 'Modular Releases'
a15_1: 'Entire product is a single deployable unit'
a15_2: 'Some of the product is separated into different deployable units'
a15_3: 'Most of the product is separated into many deployable units'
a15_4: 'Pieces of product/service is independently deployable and the lifecycle of change for different parts of the product is well understood and taken into account for the deployment architecture'
a15_min: ~

a16: 'Continuous Delivery'
a16_1: 'Manual deployment and testing are performed in staging'
a16_2: 'Manual deployment, and automatic testing are performed in staging'
a16_3: 'Automated deployment and tests are performed in staging'
a16_4: 'Automated deployment and tests are performed in production when code is checked in as "zero touch" continuous deployments'
a16_min: 2

a17: 'Deployment Methodology'
a17_1: 'Able to automatically or manually deploy a new release to a single server/cluster before rolling to the next'
a17_2: 'Able to manually determine the impact of a partial (canary) deployment'
a17_3: 'Able to automatically determine the impact of a partial (canary) deployment'
a17_4: 'Zero downtime, fully automated blue-green or red-black deployments spin up and validate a canary instance in production with the ability to segment a group or percentage of traffic, switch traffic over, and shut down the previous version once successful'
a17_min: ~

a18: 'Dependency Management (Code)'
a18_1: 'Dependencies are uncertain'
a18_2: 'Manual dependency management'
a18_3: 'Automatic dependency management'
a18_4: 'Contributors follow a defined strategy to regularly update dependencies to newer versions'
a18_min: ~

a19: 'Push Button Releases'
a19_1: 'Releases require more than one contributor to deploy'
a19_2: 'Releases require manual intervention'
a19_3: 'Code can be deployed via a push button release, but not the environment'
a19_4: 'Production-like environments can be prepared through version controlled scripts and run via push button deployments'
a19_min: ~

a20: 'Scriptable DB Releases'
a20_1: 'Database specialist makes schema / migrations on behalf of the contributors'
a20_2: 'Contributors create scripts to perform schema changes and migrations, but database specialist executes them'
a20_3: 'DB schema changes and migrations are made directly from version control as a manual set during release'
a20_4: 'DB schema changes and migrations are made directly from version control and consistent across all environments, including production'
a20_min: ~

b: "Security"

b1: 'Implement a Strong Identity foundation'
b1_1: 'Application and/or supporting infrastructure lacks appropriate identity or access control mechanisms '
b1_2: 'Application and/or supporting infrastructure manages identity independently of organizational standards'
b1_3: 'Application and supporting infrastructure use an approved identity and access management standard, some separation of duties is defined and enforced'
b1_4: 'Application and supporting infrastructure use an approved identity and access management standard, comprehensive separation of duties is defined and enforced'
b1_min: 3

b2: 'Protect data in transit and at rest'
b2_1: 'No data encryption is used'
b2_2: 'Data in transit is encrypted'
b2_3: 'Both data in transit and at rest is encrypted'
b2_4: 'Both data in transit and at rest is encrypted and encryption keys are centrally managed by the organization'
b2_min: 3

b3: 'Security Analysis'
b3_1: 'Code/application has never been scanned with a web application security scanner '
b3_2: 'Code application has an approved security suite deployed and is regularly scanned for anomalies '
b3_3: 'Code/application is automatically scanned with an approved security suite, anomalies are reported'
b3_4: 'Code/application is automatically scanned with an approved security suite and defects are prioritized into active SecOps workload using the proper incident management process'
b3_min: 2

b4: 'Automated Security Compliance'
b4_1: 'Security compliance is manually defined and audited'
b4_2: 'Some security compliance standards are automated'
b4_3: 'Most security compliance standards are automated and anomalies are reported to the security team through a defined process'
b4_4: 'All security compliance standards are automated and anomalies are reported to the security team through a defined process'
b4_min: 2

b5: 'Security Event Detection'
b5_1: "Some local logging. Events are manually observed and may not always be detected"
b5_2: "An approved security tool suite is installed and collects standard logs for analysis."
b5_3: 'Application/Environment specific security event logging is enabled throughout the application architecture. Logs are transmitted to a central security log repository for analysis'
b5_4: 'Application/Environment specific security event logging is enabled throughout the application architecture. Logs are transmitted to a central security log repository for analysis. Anomalies are automatically detected and trigger an approprate incident management process'
b5_min: 3

b6: 'Change Management Strategy'
b6_1: 'Contributors do not follow a documented or consistent deployment or change management strategy'
b6_2: 'Contributors follow a defined deployment and change management process'
b6_3: 'Contributors follow a defined deployment strategy that includes automated rollbacks, regression tests, configs, and tracking'
b6_4: 'Contributors follow a defined deployment strategy that is fully automated and includes regression tests, configs, tracking, and database releases'
b6_min: 2

b7: 'Configuration File Management'
b7_1: 'Manual configurations'
b7_2: 'Each environment has predefined configurations'
b7_3: 'Sensitive data has been abstracted, and configurations are human readable'
b7_4: "Sensitive data has been abstracted, and configurations are human readable All configurations are automated with tools that support monitoring and alerting with minimal environment-specific data"
b7_min: 3

b8: 'Network Security Controls'
b8_1: 'Some network port and protocol requirements are documented. Standard network security controls are in place'
b8_2: 'Application data flow is fully documented. Some standard network security/access controls are in place'
b8_3: 'Application data flow is fully documented. Micro-Segmentation is used to isolate all components of the application against abnormal traffic patterns'
b8_4: 'An effective defense-in-depth strategy is leveraged to protect all components of the application from abnormal traffic. Deep packet inspection is used to identify and automatically drop malformed requests'
b8_min: 2


c: "Reliability"

c1: 'Performance Testing and Capacity Planning'
c1_1: 'The operational capacity of the production software is not clearly understood'
c1_2: "Performance is manually tested during the release process using load scripts of common scenarios Contributors understand the algorithmic complexity of the software"
c1_3: "Performance is automatically tracked in a staging environment to gauge changes in application performance Contributors understand the optimal load that each instance can handle, and there is a process in place to make release decisions based on acceptance of new SLAs Capacity provisioning and scaling up and down requires manual steps"
c1_4: "Performance is automatically tracked in both staging and production with a full understanding of the application performance characteristics.  Contributors actively collaborate with the business to determine acceptance of new SLAs based on actual production traffic and predications created by load testing. Capacity provisioning and scaling up and down is fully automated"
c1_min: 2

c2: 'Release Frequency'
c2_1: 'Releases take longer than a cycle (iteration / sprint)'
c2_2: '1 release every cycle (sprint / iteration)'
c2_3: 'Multiple releases every cycle (sprint / iteration)'
c2_4: 'Code is released to production on every successful build'
c2_min: ~

c3: 'Application Scalability'
c3_1: 'No consideration has been made for application performance scaling'
c3_2: 'Application can be manually scaled vertically'
c3_3: 'Some components of the application can be scaled horizontally'
c3_4: 'Application can scale up and down automatically based on demand'
c3_min: 2

c4: 'Service Consumer Tests'
c4_1: 'No or some tests simulating a consuming application or service'
c4_2: 'Manual tests are executed to simulate a consuming application or service'
c4_3: 'Automated tests of main use cases from a consuming application or service are integrated into the build pipeline'
c4_4: 'Automated tests from a consuming application or service are triggered by the build pipeline, and cause the build to fail if there are errors'
c4_min: 2

c5: 'Build for Availability'
c5_1: 'Product is not tested for extreme failures (e.g. a node/instance becoming unavailable)'
c5_2: 'Product is manually tested for extreme failures and automatically tested for error use cases. Single points of failure are documented'
c5_3: 'Automated resilience testing is performed on the product in a staging environment without failures'
c5_4: 'Automated resilience testing is performed on the product in a staging and production environment without failures and all errors (e.g. code, web server, OS, etc...) are caught and escalated'
c5_min: 2

c6: 'Architecture Design'
c6_1: 'Architecture is a traditional "monolithic" application architecture'
c6_2: 'Architecture makes use of some managed services (e.g. DynamoDB) to improve scalability, performance, and availability '
c6_3: 'Architecture is a Services oriented Architecture (SOA) making software components reusable via service interfaces'
c6_4: 'Architecture is serverless and/or microservices-based'
c6_min: 2

c7: 'Demand Management'
c7_1: 'Workload is not readily scalable due to a change in demand'
c7_2: 'Workload can be manually scaled to account for changes in demand'
c7_3: 'Most components of the workload are dynamically scalable, and react automatically to changes in demand'
c7_4: 'Workload is highly scalable and all components of the application adjust to changes in demand automatically'
c7_min: 2

c8: 'Dependency Management (Business Services)'
c8_1: 'External/internal dependencies on this workload are uncertain'
c8_2: 'Some application dependencies are known, but not formally documented'
c8_3: 'All leads and feeds to this application/service are well documented'
c8_4: 'All leads and feeds to this application/service are well documented. Regular automated discovery is performed to identify changes in the dependency map'
c8_min: ~

c9: 'Workload Monitoring'
c9_1: 'Basic infrastructure metrics are collected (CPU, Memory, Network, Disk Space, etc)'
c9_2: 'In addition to infrastructure metrics, application availability is externally verified via a regular synthetic test'
c9_3: 'Application performance monitoring is built into the application (e.g. Amazon X-Ray). Anomalies trigger a notification or incident management process'
c9_4: 'Extensive infrastructure and application monitoring is deployed. Anomalies automatically resolve, and/or trigger an incident management process'
c9_min: 2

c10: 'Failure Management'
c10_1: 'Basic backup operations are performed at regular intervals'
c10_2: 'RTO, RPO is defined. Backup/restore operations are presumed to be sufficient'
c10_3: 'RTO, RPO is well defined. A disaster recovery plan accounts for all aspects of the application'
c10_4: 'RTO, RPO is well defined. A disaster recovery plan accounts for all aspects of the application and is regularly tested'
c10_min: 2

d: "Performance Efficiency"

d1: 'Evolving Workload'
d1_1: 'No formal mechanism exists to regularly review the solution architecture for performance improvements based on new technologies or capabilities as they become available'
d1_2: 'The solution architecture is reviewed on an informal, as-needed basis for potential technology evolution'
d1_3: 'The solution architecture is regularly reviewed. New potential performance enhancing technologies are identified'
d1_4: 'A formal process exists to regularly identify new potential performance enhancing technologies and, if applicable, implementation steps are added to the DevOps team backlog'
d1_min: 2

d2: 'Runbook Adoption'
d2_1: 'No triage runbook has been created'
d2_2: 'Contributors have created a triage runbook, but is it not actively used'
d2_3: 'Contributors have created a triage runbook, and it is integrated into the alerting infrastructure for easy reference'
d2_4: 'Contributors have created a useful triage runbook that is actively maintained and integrated into the alerting infrastructure for easy reference'
d2_min: ~

d3: 'Monitoring and Alerting'
d3_1: 'SLAs haven''t been defined or if SLAs are monitored and alerts are set up, they mostly just encompass the standard cases'
d3_2: 'SLAs are monitored and some alerts are sent when thresholds are not met, healthchecks are monitored, and alerts are configured for many standard error conditions'
d3_3: "SLAs in staging and production are consistently being met and alerted on when thresholds are not met, and healthchecks are monitored Alerts are configured for a majority of error conditions"
d3_4: "SLAs in staging and production are consistently being met, and a business disruption alert is escalated via a defined incident management process when thresholds are not met or a healthcheck fails Non-standard HTTP responses trigger an alert Alerts are triggered for main use cases when expected results are not met (i.e. lower than normal conversion rate)"
d3_min: 2

d4: 'Democratize advanced technologies'
d4_1: 'The team pays little attention to improvements in technology domains that may affect this architecture'
d4_2: 'Advanced, new, or contemporary solutions are identified, but difficult for the team to implement'
d4_3: 'The team tests new technologies as they become available, but they are rarely implemented due to internal policy or process constraints'
d4_4: 'New technologies are regularly identified, tested, and implemented such that they improve application performance'
d4_min: 1

d5: 'Risk Management'
d5_1: 'Contributors do not fully own risk management or mitigation of the product. Disaster recovery is normally defined and/or managed by someone else who has full ownership'
d5_2: 'Contributors think about disaster recovery plans while the code is built and released, but requires the involvement from many other parties'
d5_3: 'There is an established disaster recovery plan (DRP) and business continuity program (BCP)'
d5_4: 'There is an established disaster recovery plan (DRP) and business continuity program (BCP) which has been tested within the past 6 months'
d5_min: 2

d6: 'Synthetic Monitoring'
d6_1: 'No synthetic monitoring is in place'
d6_2: 'Synthetic monitoring is used in staging and production with some alerting'
d6_3: 'Synthetic monitoring is used in staging and production for major use cases, with escalation alerts for failures'
d6_4: 'Synthetic monitoring is used in staging and production for both positive and negative use cases, with escalation alerts for failures'
d6_min: 2

d7: 'Log Management Strategy'
d7_1: 'All logs, all the time!'
d7_2: 'Log rotation is based off a default template'
d7_3: "Log rotation takes into account available disk space Logs are archived for retention"
d7_4: "There is an effectively defined log rotation strategy including timing of business activities like periods of high demand Logs are retained according to business and legal requirements"
d7_min: 2

d8: 'Business Dashboard'
d8_1: 'Some business metrics are tracked in a dashboard, and / or some metrics are still mined manually, but these may not be visible or accessible to all contributors'
d8_2: "Business metrics are tracked in a dashboard that illustrates product performance, and is constantly referenced by others to quantify how the product performs All contributors have access and regular consistent visibility of the dashboard"
d8_3: "Business metrics are tracked in a dashboard that illustrates product performance, is constantly referenced by others to quantify how the product performs, and used to measure the success of new feature rollouts The dashboard is clearly visible at all times to all contributors"
d8_4: "Business metrics are tracked in a dashboard that illustrates product performance, is constantly referenced by others to quantify how the product performs, and used to measure the success of new feature rollouts Main use cases trigger alerts to stakeholders when business metrics do not match expected values (e.g. lower than expected conversion rates)"
d8_min: ~

e: "Cost Optimization"

e1: 'Continuous Process Improvement'
e1_1: 'Few processes are defined and contributors rely on tribal knowledge to succeed'
e1_2: 'Processes are documented and can be repeated by any contributor'
e1_3: 'Contributors simplify / automate processes whenever possible and documentation is maintained by as they evolve'
e1_4: 'Contributors are actively focused on continuous process improvement by identifying and enhancing processes; performance is predictable, and quality is consistently high'
e1_min: ~

e2: 'Tech Debt Management'
e2_1: 'Contributors do not track debt in any consistent way'
e2_2: 'Contributors can track debt via a defined process'
e2_3: 'Contributors avoid taking on any new debt by actively tracking and managing it'
e2_4: 'Contributors actively prioritize and reduce all debt'
e2_min: ~

e3: 'Cost-Effective Resources'
e3_1: 'The application runs in the cloud exactly as it might run on-premises'
e3_2: 'Pricing models are evaluated (AWS Pricing Calculator) and some simple opportunities for cost improvement (e.g. Reserved Instances)'
e3_3: 'Pricing models are evaluated (AWS Pricing Calculator) and some advanced opportunities for cost improvement (e.g. Spot Instances, auto-scaling, managed services)'
e3_4: 'Contributors follow a defined and accepted process for Identifying cost improvement opportunities. The application is regularly adjusted to make use of these opportunities'
e3_min: 2

e4: 'Data-Driven Metrics'
e4_1: 'It takes a lot of time to gather cost metrics. Metrics are rarely used to adjust cost or utilization'
e4_2: 'Metrics can be pulled after consumption to determine the effective run-rate. Simple to implement changes are pursued'
e4_3: 'Metrics illustrate the product health and consumption, and an ideal action is eventually taken based on the metrics to reduce cost'
e4_4: 'Metrics illustrate the product health and consumption, predictive rules create alerts, and action (e.g. product decisions) is taken based on the metrics'
e4_min: 2

e5: 'Cost of Services'
e5_1: 'Services are selected because they are similar to what the organization is already familiar with'
e5_2: 'Some consideration for managed services is made (Example: using AWS RDS over a standalone SQL Server)'
e5_3: 'Detailed analysis of all applicable services (and their effect on cost) is made before deploying to AWS. Only the services that are currently supported by our team are implemented'
e5_4: 'Application architecture has been altered to make use of contemporary managed services wherever possible (e.g. Lambda, DynamoDB, ECS/EKS, Fargate, API Gateway, etc.). All components of the application runs in the most cost-effective on-demand manner'
e5_min: 2
